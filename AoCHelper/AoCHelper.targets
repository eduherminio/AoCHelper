<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <AssemblyName>AoCHelper</AssemblyName>
    <PublishDir>PublishOutput\</PublishDir>
    <NugetPackagesDir>$(MSBuildProjectDirectory)\..\..\Artifacts\</NugetPackagesDir>
  </PropertyGroup>

  <Target Name="PushNugetPackage" Condition="$(VersionTag) != '' AND $(ApiKey) != ''">
    <Message Text="***Preparing to push Nuget Package...***" Importance="high"></Message>
    <CallTarget Targets="PrepareNugetPackage" ContinueOnError="false"></CallTarget>
    <CallTarget Targets="TestNugetPackageLocally"></CallTarget>
    <CallTarget Targets="PushToNuget"></CallTarget>
  </Target>

  <!--Dependency rather than direct call to ensure path update. -->
  <!--See https://stackoverflow.com/questions/7534390/msbuild-property-scope -->
  <Target Name="PrepareNugetPackage" DependsOnTargets="EnsureTrailingSlash">
    <Message Text="***Preparing Nuget Package***" Importance="high"></Message>
    <CallTarget Targets="Cleaning"></CallTarget>
    <Exec Command="dotnet build /t:ReplaceVersion /p:VersionTag=$(VersionTag) /p:TargetFramework=netstandard2.0"></Exec>
    <CallTarget Targets="FreshBuilding" ContinueOnError="false"></CallTarget>
    <CallTarget Targets="Tests" ContinueOnError="false"></CallTarget>
    <CallTarget Targets="DotnetPublish" ContinueOnError="false"></CallTarget>
    <CallTarget Targets="DotnetPack" ContinueOnError="false"></CallTarget>
  </Target>

  <Target Name="EnsureTrailingSlash">
    <PropertyGroup>
      <!--Ensure paths have a trailing slash, so they can be concatenated-->
      <PublishDir Condition="!HasTrailingSlash('$(PublishDir)')">$(PublishDir)\</PublishDir>
      <NugetPackagesDir Condition="!HasTrailingSlash('$(NugetPackagesDir)')">$(NugetPackagesDir)\</NugetPackagesDir>
    </PropertyGroup>
  </Target>

  <Target Name="ReplaceVersion" Condition="$(VersionTag) != '' AND $(TargetFramework)=='netstandard2.0'" DependsOnTargets="Build">
    <Message Text="***Replacing current version $(Version) by new version $(VersionTag)***" Importance="high"></Message>
    <PropertyGroup>
      <ExistingVersionRegex>&lt;Version>.*&lt;/Version</ExistingVersionRegex>
      <NewVersionRegex>&lt;Version>$(VersionTag)&lt;/Version</NewVersionRegex>
      <ExistingReference>Include=&quot;$(AssemblyName)&quot; Version=&quot;.*&quot;</ExistingReference>
      <NewReference>Include=&quot;$(AssemblyName)&quot; Version=&quot;$(VersionTag)&quot;</NewReference>
    </PropertyGroup>
    <ReplaceFileText InputFilename="AoCHelper.csproj" OutputFilename="AoCHelper.csproj"
                     MatchExpression="$(ExistingVersionRegex)" ReplacementText="$(NewVersionRegex)" />
  </Target>

  <!--ApiKey cannot be inferred from a SetApiKey previously made outside of the build script-->
  <Target Name="PushToNuget" Condition="$(ApiKey) != '' AND $(VersionTag) != '' " DependsOnTargets="TestNugetPackageLocally">
    <PropertyGroup>
      <NugetPackageName>$(AssemblyName).$(VersionTag).nupkg</NugetPackageName>
    </PropertyGroup>
    <Message Text="***Pushing $(NugetPackageName) to Nuget***" Importance="high"></Message>
    <Exec Command="nuget push $(NugetPackagesDir)$(NugetPackageName) -ApiKey $(ApiKey) -Source https://api.nuget.org/v3/index.json -Verbosity detailed"
          Condition="Exists('$(NugetPackagesDir)$(NugetPackageName)')" ContinueOnError="false"></Exec>
    <Message Text="***$(NugetPackageName) has been successfully pushed to Nuget***" Importance="high"></Message>
  </Target>
</Project>
