name: $(BuildID)

trigger:
  branches:
    include:
    - master

schedules:
- cron: "1 0 * * 1"
  displayName: 'Weekly build'
  always: true
  branches:
    include:
    - master

variables:
  Agent: 'ubuntu-latest'

stages:
- stage: CI
  displayName: 'Build and run tests'
  jobs:
  - job: ci
    displayName: 'Build and run tests'
    pool:
      vmImage: $(Agent)
    steps:

    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: build
        arguments: '--configuration Release'
        projects: 'AoCHelperSolution.sln'

    - task: DotNetCoreCLI@2
      displayName: 'Run tests'
      inputs:
        command: test
        arguments: '--configuration Release --logger trx --collect "Code coverage"'
        nobuild: true
        projects: '**/*.Test.csproj'
        publishTestResults: true

- stage: CD
  displayName: 'Generate package(s)'
  dependsOn: 'CI'
  condition: and(succeeded('CI'), ne(variables['PackageVersion'], ''))
  jobs:
  - job: cd
    displayName: 'Generate package(s)'
    pool:
      vmImage: $(Agent)
    steps:

    - checkout: self
      persistCredentials: true
      clean: true

    - task: NuGetToolInstaller@1
      displayName: 'Setup NuGet'
      inputs:
        versionSpec: '5.5.1'
        checkLatest: true

    - task: CmdLine@2
      displayName: 'Setup Git'
      inputs:
        workingDirectory: $(Build.SourcesDirectory)/AoCHelper
        script: |
            git config --replace-all user.email "azure@devops.com"
            git config --replace-all user.name "Azure DevOps"

    - task: DotNetCoreCLI@2
      displayName: 'Modify project version'
      inputs:
        command: build
        arguments: '--configuration Release /t:ReplaceVersion /p:VersionTag=$(PackageVersion)'
        projects: '**/*AoCHelper.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: build
        arguments: '--configuration Release'
        projects: 'AoCHelperSolution.sln'

    - task: DotNetCoreCLI@2
      displayName: 'Generate NuGet package'
      inputs:
        command: 'pack'
        arguments: '--configuration Release'
        configuration: 'Release'
        packagesToPack: '**/*AoCHelper.csproj'
        nobuild: true
        packDirectory: '$(Build.SourcesDirectory)/AoCHelper/Artifacts'
        versioningScheme: 'off'     # We're using ReplaceVersion target instead

    - task: PublishBuildArtifacts@1
      displayName: 'Publish artifact with NuGet package and its symbols'
      inputs:
        pathtoPublish: '$(Build.SourcesDirectory)/AoCHelper/Artifacts/'
        artifactName: 'AoCHelper'

    - task: NuGetCommand@2
      displayName: 'Push NuGet package'
      inputs:
        command: 'push'
        packagesToPush: '$(Build.SourcesDirectory)/AoCHelper/Artifacts/*.nupkg'
        nuGetFeedType: 'external'
        publishFeedCredentials: 'AoCHelper_NuGet'
        verbosityPush: 'Detailed'

    - task: NuGetCommand@2
      displayName: 'Push GitHub package'
      inputs:
        command: 'push'
        packagesToPush: '$(Build.SourcesDirectory)/AoCHelper/Artifacts/*.nupkg'
        nuGetFeedType: 'external'
        publishFeedCredentials: 'GitHubPackageRegistry'
        verbosityPush: 'Detailed'

    - task: CmdLine@2
      displayName: 'Commit and push version increment'
      condition: eq(variables['NoCommit'], '')
      inputs:
        workingDirectory: $(Build.SourcesDirectory)/AoCHelper
        script:
          git checkout master
          git status
          git add -A
          git commit -m "Release v$(PackageVersion)"
          git tag -a v$(PackageVersion) -m "v$(PackageVersion)"
          git push
          git push --tags
